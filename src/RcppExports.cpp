// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MC_int_xy_all_cpp
List MC_int_xy_all_cpp(const arma::vec& s_i, const arma::vec& y_i, double mu_tte, double sd_tte, const arma::vec& mu_y, double sigma_y_sq, const arma::vec& mu_r, const arma::mat& sigma_r, int sample_J, double x_min, bool obs);
RcppExport SEXP _MCEMCRJointCPP_MC_int_xy_all_cpp(SEXP s_iSEXP, SEXP y_iSEXP, SEXP mu_tteSEXP, SEXP sd_tteSEXP, SEXP mu_ySEXP, SEXP sigma_y_sqSEXP, SEXP mu_rSEXP, SEXP sigma_rSEXP, SEXP sample_JSEXP, SEXP x_minSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type s_i(s_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tte(mu_tteSEXP);
    Rcpp::traits::input_parameter< double >::type sd_tte(sd_tteSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_y(mu_ySEXP);
    Rcpp::traits::input_parameter< double >::type sigma_y_sq(sigma_y_sqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_r(mu_rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_r(sigma_rSEXP);
    Rcpp::traits::input_parameter< int >::type sample_J(sample_JSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< bool >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(MC_int_xy_all_cpp(s_i, y_i, mu_tte, sd_tte, mu_y, sigma_y_sq, mu_r, sigma_r, sample_J, x_min, obs));
    return rcpp_result_gen;
END_RCPP
}
// g_0_cpp
arma::vec g_0_cpp(const arma::vec& t, double mu_omega, double sigma_omega);
RcppExport SEXP _MCEMCRJointCPP_g_0_cpp(SEXP tSEXP, SEXP mu_omegaSEXP, SEXP sigma_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type mu_omega(mu_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_omega(sigma_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(g_0_cpp(t, mu_omega, sigma_omega));
    return rcpp_result_gen;
END_RCPP
}
// g_1_cpp
arma::vec g_1_cpp(const arma::vec& t, double mu_omega, double sigma_omega);
RcppExport SEXP _MCEMCRJointCPP_g_1_cpp(SEXP tSEXP, SEXP mu_omegaSEXP, SEXP sigma_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type mu_omega(mu_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_omega(sigma_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(g_1_cpp(t, mu_omega, sigma_omega));
    return rcpp_result_gen;
END_RCPP
}
// g_2_cpp
arma::vec g_2_cpp(const arma::vec& t, double mu_omega, double sigma_omega);
RcppExport SEXP _MCEMCRJointCPP_g_2_cpp(SEXP tSEXP, SEXP mu_omegaSEXP, SEXP sigma_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type mu_omega(mu_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_omega(sigma_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(g_2_cpp(t, mu_omega, sigma_omega));
    return rcpp_result_gen;
END_RCPP
}
// Z_i_cpp
arma::mat Z_i_cpp(double y, const arma::vec& visittime_vec_i);
RcppExport SEXP _MCEMCRJointCPP_Z_i_cpp(SEXP ySEXP, SEXP visittime_vec_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type visittime_vec_i(visittime_vec_iSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_i_cpp(y, visittime_vec_i));
    return rcpp_result_gen;
END_RCPP
}
// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat cov);
RcppExport SEXP _MCEMCRJointCPP_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_arma
arma::vec dmvnorm_arma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool log);
RcppExport SEXP _MCEMCRJointCPP_dmvnorm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_arma(x, mean, sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _MCEMCRJointCPP_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
// rtruncnorm_cpp
arma::vec rtruncnorm_cpp(int n, arma::vec a, arma::vec b, arma::vec mean, arma::vec sd);
RcppExport SEXP _MCEMCRJointCPP_rtruncnorm_cpp(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm_cpp(n, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCEMCRJointCPP_MC_int_xy_all_cpp", (DL_FUNC) &_MCEMCRJointCPP_MC_int_xy_all_cpp, 11},
    {"_MCEMCRJointCPP_g_0_cpp", (DL_FUNC) &_MCEMCRJointCPP_g_0_cpp, 3},
    {"_MCEMCRJointCPP_g_1_cpp", (DL_FUNC) &_MCEMCRJointCPP_g_1_cpp, 3},
    {"_MCEMCRJointCPP_g_2_cpp", (DL_FUNC) &_MCEMCRJointCPP_g_2_cpp, 3},
    {"_MCEMCRJointCPP_Z_i_cpp", (DL_FUNC) &_MCEMCRJointCPP_Z_i_cpp, 2},
    {"_MCEMCRJointCPP_Mahalanobis", (DL_FUNC) &_MCEMCRJointCPP_Mahalanobis, 3},
    {"_MCEMCRJointCPP_dmvnorm_arma", (DL_FUNC) &_MCEMCRJointCPP_dmvnorm_arma, 4},
    {"_MCEMCRJointCPP_rcpp_hello", (DL_FUNC) &_MCEMCRJointCPP_rcpp_hello, 0},
    {"_MCEMCRJointCPP_rtruncnorm_cpp", (DL_FUNC) &_MCEMCRJointCPP_rtruncnorm_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCEMCRJointCPP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
